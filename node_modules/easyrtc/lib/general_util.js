/**
 * @file        General utility functions not specific to EasyRTC
 * @module      general_util
 * @author      Priologic Software, info@easyrtc.com
 * @copyright   Copyright 2014 Priologic Software. All rights reserved.
 * @license     BSD v2, see LICENSE file in module root folder.
 */

var util = require("util");

var g = {};


/**
 * Performs a deep copy of an object, returning the duplicate.
 * Do not use on objects with circular references.
 *
 * @param       {Object} input          Input variable (or object) to be copied.
 * @returns     {Object}                New copy of variable.
 */
g.deepCopy = function(input) {
    if (input == null
        || typeof input != "object"
        || (input.constructor != Object && input.constructor != Array)
    ) {
        return input;
    }

    if (
        input.constructor == Boolean
        || input.constructor == Date
        || input.constructor == Function
        || input.constructor == Number
        || input.constructor == RegExp
        || input.constructor == String
    ) {
        return new input.constructor(input);
    }

    if (input instanceof Array) {
        var copy = [];
        for (var i = 0, len = input.length; i < len; i++) {
            copy[i] = g.deepCopy(input[i]);
        }
        return copy;
    }

    if (input instanceof Object) {
        var copy = {};
        for (var key in input) {
            if (input.hasOwnProperty(key)) {
                copy[key] = g.deepCopy(input[key]);
            }
        }
        return copy;
    }
    return null;
};


/**
 * Returns a field from the package.json file in the module root.
 * Giving null field name will return the full contents of the file.
 * If a field name is provided, it will return null if the field not found.
 *
 * @param       {Object} fieldName      Name of field you wish to return.
 * @returns     {Object}                Value of the given field, or the full contents of the file if a null field is given.
 */
g.getPackageData = function(fieldName) {
    var packageFile = require("../package");
    if (!fieldName) {
        return g.deepCopy(packageFile);
    }
    else if (packageFile[fieldName]) {
        return g.deepCopy(packageFile[fieldName]);
    }
    else {
        return null;
    }
};


/* An abstract error object which should be easy to extend for custom Error classes.
 *
 * @copyright Based on code in article by Dustin Seno.
 *
 * @param   {String}    Custom error message.
 * @param   {Object}    Constructor property.
 *
 */
g.AbstractError = function(msg, constr){
    Error.captureStackTrace(this, constr || this);
    this.message = msg || "Error";
};
util.inherits(g.AbstractError, Error);
g.AbstractError.prototype.name = "Abstract Error";


/**
 * Reads package.json and ensures all required modules are installed. Will exit if one or more is not found.
 */
g.checkModules = function () {
    try {
        var easyrtcPackage = require("../package");
    }
    catch( e ) {
        console.log("ERROR: Could not load package.json from project root. This file is required for reading project properties.");
        process.exit(1);
    }

    var moduleExists = function (modName) {
        try { return require.resolve(modName); }
        catch( e ) { return false; }
    };

    var isModuleMissing = false;
    for (var key in easyrtcPackage.dependencies) {
        if (!moduleExists(key)) {
            isModuleMissing = true;
            console.log("ERROR: Missing module '" + key + "'");
        }
    }

    if (isModuleMissing) {
        console.log("ERROR: Required modules are not installed. Run 'npm install' from command line.");
        process.exit(1);
    }

    delete require.cache[easyrtcPackage];
};

////////////////////////////////////////////////////
/////////Cutomer Functions//////////////////////

g.dateToString = function(_date){
	var outputFormat=null;
	var value = null;
	
	//check length of arguments 
	value = arguments[0];
	var len = arguments.length;
	if(len==1){
		outputFormat="YYYY-MM-DD HH:II:SS.LLL";
	}else if(len==2){
		outputFormat = arguments[1];
	}
	//go on
	if (!value)
		return "";
	var date = value.getDate().toString();
	if (date.length < 2)
		date = "0" + date;
	var month = (value.getMonth() + 1).toString();
	if (month.length < 2)
		month = "0" + month;
	var year = value.getFullYear().toString();
	var hour = value.getHours().toString();
	if(hour.length<2)
	{
		hour = "0"+hour;
	}
	var min = value.getMinutes().toString();
	if(min.length<2)
	{
		min = "0"+min;
	}
	var sec = value.getSeconds().toString();
	if(sec.length<2)
	{
		sec = "0"+sec;
	}
	var ms = value.getMilliseconds().toString();
	if(ms.length<2)
	{
		ms = "00"+ms;
	}else  if(ms.length<3)
	{
		ms = "0"+ms;
	}
	
	var output = "";
	var mask;
	var n = outputFormat != null ? outputFormat.length : 0;
	for (var i = 0; i < n; i++)
	{
		mask = outputFormat.charAt(i).toUpperCase();
		if (mask == "M")
		{
			// 月
			output += month;
			i++;    
		}else if (mask == "D")
		{
			// 日
			output += date;                         
			i++;
		}else if (mask == "Y")
		{
			// 年
			if (outputFormat.charAt(i+2) == "Y")
			{
				output += year;
				i += 3;
			}
			else
			{
				output += year.substring(2,4);
				i++;
			}
		}else if (mask == "H")
		{
			// 时
			output += hour;
			i++;    
		}else if (mask == "I")
		{
			// 分
			output += min;
			i++;    
		}else if (mask == "S")
		{
			// 秒
			output += sec;
			i++;    
		}else if (mask == "L")
		{
			// 毫秒
			output += ms;
			i += 2;  
		}else
		{
			output += mask;
		}
	}
	return output;
};

/**
 *  string to date object by format
 */
g.stringToDate = function(str){
	var valueString = null;
	var inputFormat = null;
	
	var len = arguments.length;
	valueString = arguments[0];
	if(1==len){
		inputFormat = "YYYY-MM-DD HH:II:SS.LLL";
	}else if(2==len){
		inputFormat = arguments[1];
	}
	
	var mask="";
	var temp="";
	var dateString = "";
	var monthString = "";
	var yearString = "";
	var hourString = "";
	var minString = "";
	var secString = "";
	var msString = "";
	var j = 0;
	
	var n = inputFormat.length;
	for (var i = 0; i < n; i++,j++)
	{
		temp = "" + valueString.charAt(j);
		mask = "" + inputFormat.charAt(i).toUpperCase();
		
		if (mask == "M")
		{
			// 月
			if (isNaN(Number(temp)) || temp == " ")
				j--;
			else
				monthString += temp;
		}else if (mask == "D")
		{
			// 日
			if (isNaN(Number(temp)) || temp == " ")
				j--;
			else
				dateString += temp;
		}else if (mask == "Y")
		{
			// 年
			yearString += temp;
		}else if (mask == "H")
		{
			// 时
			if (isNaN(Number(temp)) || temp == " ")
				j--;
			else
				hourString += temp;
		}else if (mask == "I")
		{
			// 分
			if (isNaN(Number(temp)) || temp == " ")
				j--;
			else
				minString += temp;
		}else if (mask == "S")
		{
			// 秒
			if (isNaN(Number(temp)) || temp == " ")
				j--;
			else
				secString += temp;
		}else if (mask == "L")
		{
			// 毫秒
			if (isNaN(Number(temp)) || temp == " ")
				j--;
			else
				msString += temp;
		}else if (!isNaN(Number(temp)) && temp != " ")
		{
			return null;
		}
	}
	
	temp = "" + valueString.charAt(inputFormat.length - i + j);
	if (!(temp == "") && (temp != " "))
		return null;
	
	var monthNum = Number(monthString);
	var dayNum = Number(dateString);
	var yearNum = Number(yearString);
	
	var hourNum = Number(hourString);
	var minNum = Number(minString);
	var secNum = Number(secString);
	var msNum = Number(msString);
	
	if (isNaN(yearNum) || isNaN(monthNum) || isNaN(dayNum))
		return null;
	
	if(isNaN(hourNum)){
		hourNum = 0;
	}
	if(isNaN(minNum)){
		minNum = 0;
	}
	if(isNaN(secNum)){
		secNum=0;
	}
	if(isNaN(msNum)){
		msNum = 0;
	}
	
	if (yearString.length == 2 && yearNum < 70)
		yearNum+=2000;
	
	var newDate = new Date(yearNum, monthNum - 1, dayNum,hourNum,minNum,secNum,msNum);
	
	if (dayNum != newDate.getDate() || (monthNum - 1) != newDate.getMonth())
		return null;
	
	return newDate;
};



module.exports = g;